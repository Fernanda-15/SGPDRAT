/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
export {};
<<<<<<< HEAD
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidDJfYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tcGlsZXIvc3JjL3JlbmRlcjMvdmlldy90Ml9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7QVNUfSBmcm9tICcuLi8uLi9leHByZXNzaW9uX3BhcnNlci9hc3QnO1xuaW1wb3J0IHtCb3VuZEF0dHJpYnV0ZSwgQm91bmRFdmVudCwgRWxlbWVudCwgTm9kZSwgUmVmZXJlbmNlLCBUZW1wbGF0ZSwgVGV4dEF0dHJpYnV0ZSwgVmFyaWFibGV9IGZyb20gJy4uL3IzX2FzdCc7XG5cblxuLypcbiAqIHQyIGlzIHRoZSByZXBsYWNlbWVudCBmb3IgdGhlIGBUZW1wbGF0ZURlZmluaXRpb25CdWlsZGVyYC4gSXQgaGFuZGxlcyB0aGUgb3BlcmF0aW9ucyBvZlxuICogYW5hbHl6aW5nIEFuZ3VsYXIgdGVtcGxhdGVzLCBleHRyYWN0aW5nIHNlbWFudGljIGluZm8sIGFuZCB1bHRpbWF0ZWx5IHByb2R1Y2luZyBhIHRlbXBsYXRlXG4gKiBkZWZpbml0aW9uIGZ1bmN0aW9uIHdoaWNoIHJlbmRlcnMgdGhlIHRlbXBsYXRlIHVzaW5nIEl2eSBpbnN0cnVjdGlvbnMuXG4gKlxuICogdDIgZGF0YSBpcyBhbHNvIHV0aWxpemVkIGJ5IHRoZSB0ZW1wbGF0ZSB0eXBlLWNoZWNraW5nIGZhY2lsaXRpZXMgdG8gdW5kZXJzdGFuZCBhIHRlbXBsYXRlIGVub3VnaFxuICogdG8gZ2VuZXJhdGUgdHlwZS1jaGVja2luZyBjb2RlIGZvciBpdC5cbiAqL1xuXG4vKipcbiAqIEEgbG9naWNhbCB0YXJnZXQgZm9yIGFuYWx5c2lzLCB3aGljaCBjb3VsZCBjb250YWluIGEgdGVtcGxhdGUgb3Igb3RoZXIgdHlwZXMgb2YgYmluZGluZ3MuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGFyZ2V0IHtcbiAgdGVtcGxhdGU/OiBOb2RlW107XG59XG5cbi8qKlxuICogQSBkYXRhIHN0cnVjdHVyZSB3aGljaCBjYW4gaW5kaWNhdGUgd2hldGhlciBhIGdpdmVuIHByb3BlcnR5IG5hbWUgaXMgcHJlc2VudCBvciBub3QuXG4gKlxuICogVGhpcyBpcyB1c2VkIHRvIHJlcHJlc2VudCB0aGUgc2V0IG9mIGlucHV0cyBvciBvdXRwdXRzIHByZXNlbnQgb24gYSBkaXJlY3RpdmUsIGFuZCBhbGxvd3MgdGhlXG4gKiBiaW5kZXIgdG8gcXVlcnkgZm9yIHRoZSBwcmVzZW5jZSBvZiBhIG1hcHBpbmcgZm9yIHByb3BlcnR5IG5hbWVzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElucHV0T3V0cHV0UHJvcGVydHlTZXQge1xuICBoYXNCaW5kaW5nUHJvcGVydHlOYW1lKHByb3BlcnR5TmFtZTogc3RyaW5nKTogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBBIGRhdGEgc3RydWN0dXJlIHdoaWNoIGNhcHR1cmVzIHRoZSBhbmltYXRpb24gdHJpZ2dlciBuYW1lcyB0aGF0IGFyZSBzdGF0aWNhbGx5IHJlc29sdmFibGVcbiAqIGFuZCB3aGV0aGVyIHNvbWUgbmFtZXMgY291bGQgbm90IGJlIHN0YXRpY2FsbHkgZXZhbHVhdGVkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFuaW1hdGlvblRyaWdnZXJOYW1lcyB7XG4gIGluY2x1ZGVzRHluYW1pY0FuaW1hdGlvbnM6IGJvb2xlYW47XG4gIHN0YXRpY1RyaWdnZXJOYW1lczogc3RyaW5nW107XG59XG5cbi8qKlxuICogTWV0YWRhdGEgcmVnYXJkaW5nIGEgZGlyZWN0aXZlIHRoYXQncyBuZWVkZWQgdG8gbWF0Y2ggaXQgYWdhaW5zdCB0ZW1wbGF0ZSBlbGVtZW50cy4gVGhpcyBpc1xuICogcHJvdmlkZWQgYnkgYSBjb25zdW1lciBvZiB0aGUgdDIgQVBJcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEaXJlY3RpdmVNZXRhIHtcbiAgLyoqXG4gICAqIE5hbWUgb2YgdGhlIGRpcmVjdGl2ZSBjbGFzcyAodXNlZCBmb3IgZGVidWdnaW5nKS5cbiAgICovXG4gIG5hbWU6IHN0cmluZztcblxuICAvKiogVGhlIHNlbGVjdG9yIGZvciB0aGUgZGlyZWN0aXZlIG9yIGBudWxsYCBpZiB0aGVyZSBpc24ndCBvbmUuICovXG4gIHNlbGVjdG9yOiBzdHJpbmd8bnVsbDtcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgZGlyZWN0aXZlIGlzIGEgY29tcG9uZW50LlxuICAgKi9cbiAgaXNDb21wb25lbnQ6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFNldCBvZiBpbnB1dHMgd2hpY2ggdGhpcyBkaXJlY3RpdmUgY2xhaW1zLlxuICAgKlxuICAgKiBHb2VzIGZyb20gcHJvcGVydHkgbmFtZXMgdG8gZmllbGQgbmFtZXMuXG4gICAqL1xuICBpbnB1dHM6IElucHV0T3V0cHV0UHJvcGVydHlTZXQ7XG5cbiAgLyoqXG4gICAqIFNldCBvZiBvdXRwdXRzIHdoaWNoIHRoaXMgZGlyZWN0aXZlIGNsYWltcy5cbiAgICpcbiAgICogR29lcyBmcm9tIHByb3BlcnR5IG5hbWVzIHRvIGZpZWxkIG5hbWVzLlxuICAgKi9cbiAgb3V0cHV0czogSW5wdXRPdXRwdXRQcm9wZXJ0eVNldDtcblxuICAvKipcbiAgICogTmFtZSB1bmRlciB3aGljaCB0aGUgZGlyZWN0aXZlIGlzIGV4cG9ydGVkLCBpZiBhbnkgKGV4cG9ydEFzIGluIEFuZ3VsYXIpLlxuICAgKlxuICAgKiBOdWxsIG90aGVyd2lzZVxuICAgKi9cbiAgZXhwb3J0QXM6IHN0cmluZ1tdfG51bGw7XG5cbiAgaXNTdHJ1Y3R1cmFsOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiBhbmltYXRpb25zIHRoYXQgdGhlIHVzZXIgZGVmaW5lcyBpbiB0aGUgY29tcG9uZW50LlxuICAgKiBPbmx5IGluY2x1ZGVzIHRoZSBhbmltYXRpb24gbmFtZXMuXG4gICAqL1xuICBhbmltYXRpb25UcmlnZ2VyTmFtZXM6IEFuaW1hdGlvblRyaWdnZXJOYW1lc3xudWxsO1xufVxuXG4vKipcbiAqIEludGVyZmFjZSB0byB0aGUgYmluZGluZyBBUEksIHdoaWNoIHByb2Nlc3NlcyBhIHRlbXBsYXRlIGFuZCByZXR1cm5zIGFuIG9iamVjdCBzaW1pbGFyIHRvIHRoZVxuICogYHRzLlR5cGVDaGVja2VyYC5cbiAqXG4gKiBUaGUgcmV0dXJuZWQgYEJvdW5kVGFyZ2V0YCBoYXMgYW4gQVBJIGZvciBleHRyYWN0aW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSBwcm9jZXNzZWQgdGFyZ2V0LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRhcmdldEJpbmRlcjxEIGV4dGVuZHMgRGlyZWN0aXZlTWV0YT4ge1xuICBiaW5kKHRhcmdldDogVGFyZ2V0KTogQm91bmRUYXJnZXQ8RD47XG59XG5cbi8qKlxuICogUmVzdWx0IG9mIHBlcmZvcm1pbmcgdGhlIGJpbmRpbmcgb3BlcmF0aW9uIGFnYWluc3QgYSBgVGFyZ2V0YC5cbiAqXG4gKiBUaGUgb3JpZ2luYWwgYFRhcmdldGAgaXMgYWNjZXNzaWJsZSwgYXMgd2VsbCBhcyBhIHN1aXRlIG9mIG1ldGhvZHMgZm9yIGV4dHJhY3RpbmcgYmluZGluZ1xuICogaW5mb3JtYXRpb24gcmVnYXJkaW5nIHRoZSBgVGFyZ2V0YC5cbiAqXG4gKiBAcGFyYW0gRGlyZWN0aXZlVCBkaXJlY3RpdmUgbWV0YWRhdGEgdHlwZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJvdW5kVGFyZ2V0PERpcmVjdGl2ZVQgZXh0ZW5kcyBEaXJlY3RpdmVNZXRhPiB7XG4gIC8qKlxuICAgKiBHZXQgdGhlIG9yaWdpbmFsIGBUYXJnZXRgIHRoYXQgd2FzIGJvdW5kLlxuICAgKi9cbiAgcmVhZG9ubHkgdGFyZ2V0OiBUYXJnZXQ7XG5cbiAgLyoqXG4gICAqIEZvciBhIGdpdmVuIHRlbXBsYXRlIG5vZGUgKGVpdGhlciBhbiBgRWxlbWVudGAgb3IgYSBgVGVtcGxhdGVgKSwgZ2V0IHRoZSBzZXQgb2YgZGlyZWN0aXZlc1xuICAgKiB3aGljaCBtYXRjaGVkIHRoZSBub2RlLCBpZiBhbnkuXG4gICAqL1xuICBnZXREaXJlY3RpdmVzT2ZOb2RlKG5vZGU6IEVsZW1lbnR8VGVtcGxhdGUpOiBEaXJlY3RpdmVUW118bnVsbDtcblxuICAvKipcbiAgICogRm9yIGEgZ2l2ZW4gYFJlZmVyZW5jZWAsIGdldCB0aGUgcmVmZXJlbmNlJ3MgdGFyZ2V0IC0gZWl0aGVyIGFuIGBFbGVtZW50YCwgYSBgVGVtcGxhdGVgLCBvclxuICAgKiBhIGRpcmVjdGl2ZSBvbiBhIHBhcnRpY3VsYXIgbm9kZS5cbiAgICovXG4gIGdldFJlZmVyZW5jZVRhcmdldChyZWY6IFJlZmVyZW5jZSk6IHtkaXJlY3RpdmU6IERpcmVjdGl2ZVQsIG5vZGU6IEVsZW1lbnR8VGVtcGxhdGV9fEVsZW1lbnRcbiAgICAgIHxUZW1wbGF0ZXxudWxsO1xuXG4gIC8qKlxuICAgKiBGb3IgYSBnaXZlbiBiaW5kaW5nLCBnZXQgdGhlIGVudGl0eSB0byB3aGljaCB0aGUgYmluZGluZyBpcyBiZWluZyBtYWRlLlxuICAgKlxuICAgKiBUaGlzIHdpbGwgZWl0aGVyIGJlIGEgZGlyZWN0aXZlIG9yIHRoZSBub2RlIGl0c2VsZi5cbiAgICovXG4gIGdldENvbnN1bWVyT2ZCaW5kaW5nKGJpbmRpbmc6IEJvdW5kQXR0cmlidXRlfEJvdW5kRXZlbnR8VGV4dEF0dHJpYnV0ZSk6IERpcmVjdGl2ZVR8RWxlbWVudFxuICAgICAgfFRlbXBsYXRlfG51bGw7XG5cbiAgLyoqXG4gICAqIElmIHRoZSBnaXZlbiBgQVNUYCBleHByZXNzaW9uIHJlZmVycyB0byBhIGBSZWZlcmVuY2VgIG9yIGBWYXJpYWJsZWAgd2l0aGluIHRoZSBgVGFyZ2V0YCwgdGhlblxuICAgKiByZXR1cm4gdGhhdC5cbiAgICpcbiAgICogT3RoZXJ3aXNlLCByZXR1cm5zIGBudWxsYC5cbiAgICpcbiAgICogVGhpcyBpcyBvbmx5IGRlZmluZWQgZm9yIGBBU1RgIGV4cHJlc3Npb25zIHRoYXQgcmVhZCBvciB3cml0ZSB0byBhIHByb3BlcnR5IG9mIGFuXG4gICAqIGBJbXBsaWNpdFJlY2VpdmVyYC5cbiAgICovXG4gIGdldEV4cHJlc3Npb25UYXJnZXQoZXhwcjogQVNUKTogUmVmZXJlbmNlfFZhcmlhYmxlfG51bGw7XG5cbiAgLyoqXG4gICAqIEdpdmVuIGEgcGFydGljdWxhciBgUmVmZXJlbmNlYCBvciBgVmFyaWFibGVgLCBnZXQgdGhlIGBUZW1wbGF0ZWAgd2hpY2ggY3JlYXRlZCBpdC5cbiAgICpcbiAgICogQWxsIGBWYXJpYWJsZWBzIGFyZSBkZWZpbmVkIG9uIHRlbXBsYXRlcywgc28gdGhpcyB3aWxsIGFsd2F5cyByZXR1cm4gYSB2YWx1ZSBmb3IgYSBgVmFyaWFibGVgXG4gICAqIGZyb20gdGhlIGBUYXJnZXRgLiBGb3IgYFJlZmVyZW5jZWBzIHRoaXMgb25seSByZXR1cm5zIGEgdmFsdWUgaWYgdGhlIGBSZWZlcmVuY2VgIHBvaW50cyB0byBhXG4gICAqIGBUZW1wbGF0ZWAuIFJldHVybnMgYG51bGxgIG90aGVyd2lzZS5cbiAgICovXG4gIGdldFRlbXBsYXRlT2ZTeW1ib2woc3ltYm9sOiBSZWZlcmVuY2V8VmFyaWFibGUpOiBUZW1wbGF0ZXxudWxsO1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5lc3RpbmcgbGV2ZWwgb2YgYSBwYXJ0aWN1bGFyIGBUZW1wbGF0ZWAuXG4gICAqXG4gICAqIFRoaXMgc3RhcnRzIGF0IDEgZm9yIHRvcC1sZXZlbCBgVGVtcGxhdGVgcyB3aXRoaW4gdGhlIGBUYXJnZXRgIGFuZCBpbmNyZWFzZXMgZm9yIGBUZW1wbGF0ZWBzXG4gICAqIG5lc3RlZCBhdCBkZWVwZXIgbGV2ZWxzLlxuICAgKi9cbiAgZ2V0TmVzdGluZ0xldmVsKHRlbXBsYXRlOiBUZW1wbGF0ZSk6IG51bWJlcjtcblxuICAvKipcbiAgICogR2V0IGFsbCBgUmVmZXJlbmNlYHMgYW5kIGBWYXJpYWJsZXNgIHZpc2libGUgd2l0aGluIHRoZSBnaXZlbiBgVGVtcGxhdGVgIChvciBhdCB0aGUgdG9wIGxldmVsLFxuICAgKiBpZiBgbnVsbGAgaXMgcGFzc2VkKS5cbiAgICovXG4gIGdldEVudGl0aWVzSW5UZW1wbGF0ZVNjb3BlKHRlbXBsYXRlOiBUZW1wbGF0ZXxudWxsKTogUmVhZG9ubHlTZXQ8UmVmZXJlbmNlfFZhcmlhYmxlPjtcblxuICAvKipcbiAgICogR2V0IGEgbGlzdCBvZiBhbGwgdGhlIGRpcmVjdGl2ZXMgdXNlZCBieSB0aGUgdGFyZ2V0LlxuICAgKi9cbiAgZ2V0VXNlZERpcmVjdGl2ZXMoKTogRGlyZWN0aXZlVFtdO1xuXG4gIC8qKlxuICAgKiBHZXQgYSBsaXN0IG9mIGFsbCB0aGUgcGlwZXMgdXNlZCBieSB0aGUgdGFyZ2V0LlxuICAgKi9cbiAgZ2V0VXNlZFBpcGVzKCk6IHN0cmluZ1tdO1xufVxuIl19
=======
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidDJfYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tcGlsZXIvc3JjL3JlbmRlcjMvdmlldy90Ml9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7QVNUfSBmcm9tICcuLi8uLi9leHByZXNzaW9uX3BhcnNlci9hc3QnO1xuaW1wb3J0IHtCb3VuZEF0dHJpYnV0ZSwgQm91bmRFdmVudCwgRWxlbWVudCwgTm9kZSwgUmVmZXJlbmNlLCBUZW1wbGF0ZSwgVGV4dEF0dHJpYnV0ZSwgVmFyaWFibGV9IGZyb20gJy4uL3IzX2FzdCc7XG5cblxuLypcbiAqIHQyIGlzIHRoZSByZXBsYWNlbWVudCBmb3IgdGhlIGBUZW1wbGF0ZURlZmluaXRpb25CdWlsZGVyYC4gSXQgaGFuZGxlcyB0aGUgb3BlcmF0aW9ucyBvZlxuICogYW5hbHl6aW5nIEFuZ3VsYXIgdGVtcGxhdGVzLCBleHRyYWN0aW5nIHNlbWFudGljIGluZm8sIGFuZCB1bHRpbWF0ZWx5IHByb2R1Y2luZyBhIHRlbXBsYXRlXG4gKiBkZWZpbml0aW9uIGZ1bmN0aW9uIHdoaWNoIHJlbmRlcnMgdGhlIHRlbXBsYXRlIHVzaW5nIEl2eSBpbnN0cnVjdGlvbnMuXG4gKlxuICogdDIgZGF0YSBpcyBhbHNvIHV0aWxpemVkIGJ5IHRoZSB0ZW1wbGF0ZSB0eXBlLWNoZWNraW5nIGZhY2lsaXRpZXMgdG8gdW5kZXJzdGFuZCBhIHRlbXBsYXRlIGVub3VnaFxuICogdG8gZ2VuZXJhdGUgdHlwZS1jaGVja2luZyBjb2RlIGZvciBpdC5cbiAqL1xuXG4vKipcbiAqIEEgbG9naWNhbCB0YXJnZXQgZm9yIGFuYWx5c2lzLCB3aGljaCBjb3VsZCBjb250YWluIGEgdGVtcGxhdGUgb3Igb3RoZXIgdHlwZXMgb2YgYmluZGluZ3MuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGFyZ2V0IHtcbiAgdGVtcGxhdGU/OiBOb2RlW107XG59XG5cbi8qKlxuICogQSBkYXRhIHN0cnVjdHVyZSB3aGljaCBjYW4gaW5kaWNhdGUgd2hldGhlciBhIGdpdmVuIHByb3BlcnR5IG5hbWUgaXMgcHJlc2VudCBvciBub3QuXG4gKlxuICogVGhpcyBpcyB1c2VkIHRvIHJlcHJlc2VudCB0aGUgc2V0IG9mIGlucHV0cyBvciBvdXRwdXRzIHByZXNlbnQgb24gYSBkaXJlY3RpdmUsIGFuZCBhbGxvd3MgdGhlXG4gKiBiaW5kZXIgdG8gcXVlcnkgZm9yIHRoZSBwcmVzZW5jZSBvZiBhIG1hcHBpbmcgZm9yIHByb3BlcnR5IG5hbWVzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElucHV0T3V0cHV0UHJvcGVydHlTZXQge1xuICBoYXNCaW5kaW5nUHJvcGVydHlOYW1lKHByb3BlcnR5TmFtZTogc3RyaW5nKTogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBNZXRhZGF0YSByZWdhcmRpbmcgYSBkaXJlY3RpdmUgdGhhdCdzIG5lZWRlZCB0byBtYXRjaCBpdCBhZ2FpbnN0IHRlbXBsYXRlIGVsZW1lbnRzLiBUaGlzIGlzXG4gKiBwcm92aWRlZCBieSBhIGNvbnN1bWVyIG9mIHRoZSB0MiBBUElzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIERpcmVjdGl2ZU1ldGEge1xuICAvKipcbiAgICogTmFtZSBvZiB0aGUgZGlyZWN0aXZlIGNsYXNzICh1c2VkIGZvciBkZWJ1Z2dpbmcpLlxuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xuXG4gIC8qKiBUaGUgc2VsZWN0b3IgZm9yIHRoZSBkaXJlY3RpdmUgb3IgYG51bGxgIGlmIHRoZXJlIGlzbid0IG9uZS4gKi9cbiAgc2VsZWN0b3I6IHN0cmluZ3xudWxsO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBkaXJlY3RpdmUgaXMgYSBjb21wb25lbnQuXG4gICAqL1xuICBpc0NvbXBvbmVudDogYm9vbGVhbjtcblxuICAvKipcbiAgICogU2V0IG9mIGlucHV0cyB3aGljaCB0aGlzIGRpcmVjdGl2ZSBjbGFpbXMuXG4gICAqXG4gICAqIEdvZXMgZnJvbSBwcm9wZXJ0eSBuYW1lcyB0byBmaWVsZCBuYW1lcy5cbiAgICovXG4gIGlucHV0czogSW5wdXRPdXRwdXRQcm9wZXJ0eVNldDtcblxuICAvKipcbiAgICogU2V0IG9mIG91dHB1dHMgd2hpY2ggdGhpcyBkaXJlY3RpdmUgY2xhaW1zLlxuICAgKlxuICAgKiBHb2VzIGZyb20gcHJvcGVydHkgbmFtZXMgdG8gZmllbGQgbmFtZXMuXG4gICAqL1xuICBvdXRwdXRzOiBJbnB1dE91dHB1dFByb3BlcnR5U2V0O1xuXG4gIC8qKlxuICAgKiBOYW1lIHVuZGVyIHdoaWNoIHRoZSBkaXJlY3RpdmUgaXMgZXhwb3J0ZWQsIGlmIGFueSAoZXhwb3J0QXMgaW4gQW5ndWxhcikuXG4gICAqXG4gICAqIE51bGwgb3RoZXJ3aXNlXG4gICAqL1xuICBleHBvcnRBczogc3RyaW5nW118bnVsbDtcblxuICBpc1N0cnVjdHVyYWw6IGJvb2xlYW47XG59XG5cbi8qKlxuICogSW50ZXJmYWNlIHRvIHRoZSBiaW5kaW5nIEFQSSwgd2hpY2ggcHJvY2Vzc2VzIGEgdGVtcGxhdGUgYW5kIHJldHVybnMgYW4gb2JqZWN0IHNpbWlsYXIgdG8gdGhlXG4gKiBgdHMuVHlwZUNoZWNrZXJgLlxuICpcbiAqIFRoZSByZXR1cm5lZCBgQm91bmRUYXJnZXRgIGhhcyBhbiBBUEkgZm9yIGV4dHJhY3RpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHByb2Nlc3NlZCB0YXJnZXQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGFyZ2V0QmluZGVyPEQgZXh0ZW5kcyBEaXJlY3RpdmVNZXRhPiB7XG4gIGJpbmQodGFyZ2V0OiBUYXJnZXQpOiBCb3VuZFRhcmdldDxEPjtcbn1cblxuLyoqXG4gKiBSZXN1bHQgb2YgcGVyZm9ybWluZyB0aGUgYmluZGluZyBvcGVyYXRpb24gYWdhaW5zdCBhIGBUYXJnZXRgLlxuICpcbiAqIFRoZSBvcmlnaW5hbCBgVGFyZ2V0YCBpcyBhY2Nlc3NpYmxlLCBhcyB3ZWxsIGFzIGEgc3VpdGUgb2YgbWV0aG9kcyBmb3IgZXh0cmFjdGluZyBiaW5kaW5nXG4gKiBpbmZvcm1hdGlvbiByZWdhcmRpbmcgdGhlIGBUYXJnZXRgLlxuICpcbiAqIEBwYXJhbSBEaXJlY3RpdmVUIGRpcmVjdGl2ZSBtZXRhZGF0YSB0eXBlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQm91bmRUYXJnZXQ8RGlyZWN0aXZlVCBleHRlbmRzIERpcmVjdGl2ZU1ldGE+IHtcbiAgLyoqXG4gICAqIEdldCB0aGUgb3JpZ2luYWwgYFRhcmdldGAgdGhhdCB3YXMgYm91bmQuXG4gICAqL1xuICByZWFkb25seSB0YXJnZXQ6IFRhcmdldDtcblxuICAvKipcbiAgICogRm9yIGEgZ2l2ZW4gdGVtcGxhdGUgbm9kZSAoZWl0aGVyIGFuIGBFbGVtZW50YCBvciBhIGBUZW1wbGF0ZWApLCBnZXQgdGhlIHNldCBvZiBkaXJlY3RpdmVzXG4gICAqIHdoaWNoIG1hdGNoZWQgdGhlIG5vZGUsIGlmIGFueS5cbiAgICovXG4gIGdldERpcmVjdGl2ZXNPZk5vZGUobm9kZTogRWxlbWVudHxUZW1wbGF0ZSk6IERpcmVjdGl2ZVRbXXxudWxsO1xuXG4gIC8qKlxuICAgKiBGb3IgYSBnaXZlbiBgUmVmZXJlbmNlYCwgZ2V0IHRoZSByZWZlcmVuY2UncyB0YXJnZXQgLSBlaXRoZXIgYW4gYEVsZW1lbnRgLCBhIGBUZW1wbGF0ZWAsIG9yXG4gICAqIGEgZGlyZWN0aXZlIG9uIGEgcGFydGljdWxhciBub2RlLlxuICAgKi9cbiAgZ2V0UmVmZXJlbmNlVGFyZ2V0KHJlZjogUmVmZXJlbmNlKToge2RpcmVjdGl2ZTogRGlyZWN0aXZlVCwgbm9kZTogRWxlbWVudHxUZW1wbGF0ZX18RWxlbWVudFxuICAgICAgfFRlbXBsYXRlfG51bGw7XG5cbiAgLyoqXG4gICAqIEZvciBhIGdpdmVuIGJpbmRpbmcsIGdldCB0aGUgZW50aXR5IHRvIHdoaWNoIHRoZSBiaW5kaW5nIGlzIGJlaW5nIG1hZGUuXG4gICAqXG4gICAqIFRoaXMgd2lsbCBlaXRoZXIgYmUgYSBkaXJlY3RpdmUgb3IgdGhlIG5vZGUgaXRzZWxmLlxuICAgKi9cbiAgZ2V0Q29uc3VtZXJPZkJpbmRpbmcoYmluZGluZzogQm91bmRBdHRyaWJ1dGV8Qm91bmRFdmVudHxUZXh0QXR0cmlidXRlKTogRGlyZWN0aXZlVHxFbGVtZW50XG4gICAgICB8VGVtcGxhdGV8bnVsbDtcblxuICAvKipcbiAgICogSWYgdGhlIGdpdmVuIGBBU1RgIGV4cHJlc3Npb24gcmVmZXJzIHRvIGEgYFJlZmVyZW5jZWAgb3IgYFZhcmlhYmxlYCB3aXRoaW4gdGhlIGBUYXJnZXRgLCB0aGVuXG4gICAqIHJldHVybiB0aGF0LlxuICAgKlxuICAgKiBPdGhlcndpc2UsIHJldHVybnMgYG51bGxgLlxuICAgKlxuICAgKiBUaGlzIGlzIG9ubHkgZGVmaW5lZCBmb3IgYEFTVGAgZXhwcmVzc2lvbnMgdGhhdCByZWFkIG9yIHdyaXRlIHRvIGEgcHJvcGVydHkgb2YgYW5cbiAgICogYEltcGxpY2l0UmVjZWl2ZXJgLlxuICAgKi9cbiAgZ2V0RXhwcmVzc2lvblRhcmdldChleHByOiBBU1QpOiBSZWZlcmVuY2V8VmFyaWFibGV8bnVsbDtcblxuICAvKipcbiAgICogR2l2ZW4gYSBwYXJ0aWN1bGFyIGBSZWZlcmVuY2VgIG9yIGBWYXJpYWJsZWAsIGdldCB0aGUgYFRlbXBsYXRlYCB3aGljaCBjcmVhdGVkIGl0LlxuICAgKlxuICAgKiBBbGwgYFZhcmlhYmxlYHMgYXJlIGRlZmluZWQgb24gdGVtcGxhdGVzLCBzbyB0aGlzIHdpbGwgYWx3YXlzIHJldHVybiBhIHZhbHVlIGZvciBhIGBWYXJpYWJsZWBcbiAgICogZnJvbSB0aGUgYFRhcmdldGAuIEZvciBgUmVmZXJlbmNlYHMgdGhpcyBvbmx5IHJldHVybnMgYSB2YWx1ZSBpZiB0aGUgYFJlZmVyZW5jZWAgcG9pbnRzIHRvIGFcbiAgICogYFRlbXBsYXRlYC4gUmV0dXJucyBgbnVsbGAgb3RoZXJ3aXNlLlxuICAgKi9cbiAgZ2V0VGVtcGxhdGVPZlN5bWJvbChzeW1ib2w6IFJlZmVyZW5jZXxWYXJpYWJsZSk6IFRlbXBsYXRlfG51bGw7XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbmVzdGluZyBsZXZlbCBvZiBhIHBhcnRpY3VsYXIgYFRlbXBsYXRlYC5cbiAgICpcbiAgICogVGhpcyBzdGFydHMgYXQgMSBmb3IgdG9wLWxldmVsIGBUZW1wbGF0ZWBzIHdpdGhpbiB0aGUgYFRhcmdldGAgYW5kIGluY3JlYXNlcyBmb3IgYFRlbXBsYXRlYHNcbiAgICogbmVzdGVkIGF0IGRlZXBlciBsZXZlbHMuXG4gICAqL1xuICBnZXROZXN0aW5nTGV2ZWwodGVtcGxhdGU6IFRlbXBsYXRlKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBHZXQgYWxsIGBSZWZlcmVuY2VgcyBhbmQgYFZhcmlhYmxlc2AgdmlzaWJsZSB3aXRoaW4gdGhlIGdpdmVuIGBUZW1wbGF0ZWAgKG9yIGF0IHRoZSB0b3AgbGV2ZWwsXG4gICAqIGlmIGBudWxsYCBpcyBwYXNzZWQpLlxuICAgKi9cbiAgZ2V0RW50aXRpZXNJblRlbXBsYXRlU2NvcGUodGVtcGxhdGU6IFRlbXBsYXRlfG51bGwpOiBSZWFkb25seVNldDxSZWZlcmVuY2V8VmFyaWFibGU+O1xuXG4gIC8qKlxuICAgKiBHZXQgYSBsaXN0IG9mIGFsbCB0aGUgZGlyZWN0aXZlcyB1c2VkIGJ5IHRoZSB0YXJnZXQuXG4gICAqL1xuICBnZXRVc2VkRGlyZWN0aXZlcygpOiBEaXJlY3RpdmVUW107XG5cbiAgLyoqXG4gICAqIEdldCBhIGxpc3Qgb2YgYWxsIHRoZSBwaXBlcyB1c2VkIGJ5IHRoZSB0YXJnZXQuXG4gICAqL1xuICBnZXRVc2VkUGlwZXMoKTogc3RyaW5nW107XG59XG4iXX0=
>>>>>>> main
