import { __decorate, __metadata } from 'tslib';
import { ViewChild, ElementRef, Input, Component, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { GanttChart } from 'jsgantt-improved';

import * as ɵngcc0 from '@angular/core';

const _c0 = ["ganttEditorContainer"];
class GanttEditorOptions {
    // public onEditable: (node: GanttEditorTreeNode | {}) => boolean | { field: boolean, value: boolean };
    // public theme: Number;
    // public language: String;
    // public languages: Object;
    constructor() {
        // this.escapeUnicode = false;
        // this.sortObjectKeys = false;
        // this.history = true;
    }
}

let GanttEditorComponent = class GanttEditorComponent {
    constructor() {
        this.id = 'anggantteditor' + Math.floor(Math.random() * 1000000);
        this.optionsChanged = false;
        this.formats = ['Hour', 'Day', 'Week', 'Month', 'Quarter'];
        this.options = new GanttEditorOptions();
        this.format = 'week';
    }
    set data(value) {
        this._data = value;
        if (this.editor) {
            this.destroy();
            this.ngOnInit();
        }
    }
    ngOnInit() {
        let optionsBefore = this.options;
        if (!this.optionsChanged && this.editor) {
            optionsBefore = this.editor.options;
        }
        // document.getElementById('embedded-Gantt')
        const g = this.editor = new GanttChart(this.ganttEditorContainer.nativeElement, this.format);
        if (g.getDivId() != null) {
            // JSGantt.parseJSON('./fixes/data.json', g);
            g.setOptions(Object.assign({ vCaptionType: 'Complete', vQuarterColWidth: 36, vDateTaskDisplayFormat: 'day dd month yyyy', vDayMajorDateDisplayFormat: 'mon yyyy - Week ww', vWeekMinorDateDisplayFormat: 'dd mon', vShowTaskInfoLink: 1, vShowEndWeekDate: 0, vUseSingleCell: 10000, 
                // Even with setUseSingleCell using Hour format on such a large chart can cause issues in some browsers
                vFormatArr: this.formats.slice(1) }, optionsBefore));
            if (this._data && this._data.forEach) {
                this._data.forEach(row => {
                    row.pGantt = g;
                    g.AddTaskItemObject(row);
                });
            }
            g.Draw();
        }
    }
    // public get(): JSON {
    //   return this.editor.get();
    // }
    setOptions(newOptions) {
        if (this.editor) {
            this.destroy();
        }
        this.optionsChanged = true;
        this.options = newOptions;
        this.ngOnInit();
    }
    destroy() {
        // this.editor.destroy();
    }
};
GanttEditorComponent.ɵfac = function GanttEditorComponent_Factory(t) { return new (t || GanttEditorComponent)(); };
GanttEditorComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: GanttEditorComponent, selectors: [["ng-gantt"]], viewQuery: function GanttEditorComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ganttEditorContainer = _t.first);
    } }, inputs: { options: "options", format: "format", data: "data" }, decls: 2, vars: 1, consts: [[3, "id"], ["ganttEditorContainer", ""]], template: function GanttEditorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", 0, 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("id", ctx.id);
    } }, encapsulation: 2 });
__decorate([
    ViewChild('ganttEditorContainer', { static: true }),
    __metadata("design:type", ElementRef)
], GanttEditorComponent.prototype, "ganttEditorContainer", void 0);
__decorate([
    Input(),
    __metadata("design:type", GanttEditorOptions)
], GanttEditorComponent.prototype, "options", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], GanttEditorComponent.prototype, "format", void 0);
__decorate([
    Input('data'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], GanttEditorComponent.prototype, "data", null);
GanttEditorComponent = __decorate([ __metadata("design:paramtypes", [])
], GanttEditorComponent);

var NgGanttEditorModule_1;
let NgGanttEditorModule = NgGanttEditorModule_1 = class NgGanttEditorModule {
    static forRoot() {
        return {
            ngModule: NgGanttEditorModule_1,
            providers: []
        };
    }
};
NgGanttEditorModule.ɵfac = function NgGanttEditorModule_Factory(t) { return new (t || NgGanttEditorModule)(); };
NgGanttEditorModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgGanttEditorModule });
NgGanttEditorModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GanttEditorComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line:component-selector
                selector: 'ng-gantt',
                template: '<div [id]="id" #ganttEditorContainer></div>'
            }]
    }], function () { return []; }, { options: [{
            type: Input
        }], format: [{
            type: Input
        }], data: [{
            type: Input,
            args: ['data']
        }], ganttEditorContainer: [{
            type: ViewChild,
            args: ['ganttEditorContainer', { static: true }]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgGanttEditorModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    GanttEditorComponent
                ],
                exports: [
                    GanttEditorComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgGanttEditorModule, { declarations: function () { return [GanttEditorComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [GanttEditorComponent]; } }); })();

export { GanttEditorComponent, GanttEditorOptions, NgGanttEditorModule };

//# sourceMappingURL=ng-gantt.js.map